/* eslint-env node, mocha */
import assert from "assert";
import { mw } from "../globals";
import Disambiguate from "../xfdcloser-src/Controllers/Tasks/Disambiguate";
import TaskItem from "../xfdcloser-src/Models/TaskItem";
import Discussion from "../xfdcloser-src/Models/Discussion";
import Venue from "../xfdcloser-src/Venue";
import Result from "../xfdcloser-src/Models/Result";
import Options from "../xfdcloser-src/Models/Options";

// Mock widgets
const noop = () => {};
const widgets = {
	field: {
		setLabel: noop,
		setNotices: noop,
		setWarnings: noop,
		setErrors: noop,
	},
	progressbar: {
		setProgress: noop,
		toggle: noop
	},
	emit: ()=>{}
};

describe("Disambiguate", function() {
	let discussion, result, options, model, task;
	beforeEach(function() {
		discussion = new Discussion({
			id: "id",
			venue: Venue.Rfd(),
			pages: ["Foobar"].map(t => mw.Title.newFromText(t)),
			discussionPageName: "Wikipedia:Articles for deletion/Foobar",
			sectionHeader: "Foobar",
			sectionNumber: 1,
			firstCommentDate: new Date("2020-03-18T12:22Z"),
			isRelisted: false,
			userIsSysop: true
		});	
		mw.Title.exist.set(discussion.pages.map(t => t.getPrefixedDb()), true);
		discussion.nominationDate = discussion.firstCommentDate;
		result = new Result({
			discussion,
			type: "close",
			userIsSysop: true
		});
		options = new Options({
			result,
			venue: discussion.venue,
			userIsSysop: true
		});
		result.singleModeResult.setSelectedResultName("disambiguate");
		model = new TaskItem({
			taskName: "foo",
			relaventPageNames: discussion.pagesNames,
			discussion,
			result,
			options
		});
		task = new Disambiguate(model, widgets);
	});
	it("transforms a page content without disambig template without a nom template", function() {
		const page = {
			title: "Foobar",
			content: "#REDIRECT [[Foo]]"
		};
		const transformed = task.transform(page);
		assert.deepStrictEqual(Object.keys(transformed), ["text", "summary"]);
		assert.strictEqual(transformed.text, "* [[Foo]]\n{{Disambiguation cleanup|{{subst:DATE}}}}");
	});
	it("transforms a page content with disambig template but without a nom template", function() {
		const page = {
			title: "Foobar",
			content: "#REDIRECT [[Foo]]\n\nLorem ipsum dorem sum\n\n{{disambiguation}}"
		};
		const transformed = task.transform(page);
		assert.deepStrictEqual(Object.keys(transformed), ["text", "summary"]);
		assert.strictEqual(transformed.text, "* [[Foo]]\n\nLorem ipsum dorem sum\n\n{{disambiguation}}");
	});
	it("transforms a page content without disambig template but with a nom template", function() {
		const page = {
			title: "Foobar",
			content: `{{<includeonly>safesubst:</includeonly>#invoke:RfD|||month = October
|day =  5
|year = 2020
|time = 11:34
|timestamp = 20201005113436
<!-- The above content is generated by {{subst:rfd}}. -->
<!-- End of RFD message. Don't edit anything above here, but feel free to edit below here. -->|content=
#REDIRECT [[Foo]]
<!-- Don't add anything after this line unless you're drafting a disambiguation page or article to replace the redirect. -->
}}
...DRAFT DISAMBIG CONTENT...`
		};
		const transformed = task.transform(page);
		assert.deepStrictEqual(Object.keys(transformed), ["text", "summary"]);
		assert.strictEqual(transformed.text, "...DRAFT DISAMBIG CONTENT...\n{{Disambiguation cleanup|{{subst:DATE}}}}");
	});
	it("transforms a page content with disambig template and with a nom template", function() {
		const page = {
			title: "Foobar",
			content: `{{<includeonly>safesubst:</includeonly>#invoke:RfD|||month = October
|day =  5
|year = 2020
|time = 11:34
|timestamp = 20201005113436
<!-- The above content is generated by {{subst:rfd}}. -->
<!-- End of RFD message. Don't edit anything above here, but feel free to edit below here. -->|content=
#REDIRECT [[Foo]]
<!-- Don't add anything after this line unless you're drafting a disambiguation page or article to replace the redirect. -->
}}
...DRAFT DISAMBIG CONTENT...
{{Disambiguation something or other}}`
		};
		const transformed = task.transform(page);
		assert.deepStrictEqual(Object.keys(transformed), ["text", "summary"]);
		assert.strictEqual(transformed.text, "...DRAFT DISAMBIG CONTENT...\n{{Disambiguation something or other}}");
	});
});